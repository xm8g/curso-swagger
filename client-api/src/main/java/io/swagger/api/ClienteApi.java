/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.Cliente;
import io.swagger.model.Clientes;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-07T13:30:54.713Z")

@Api(value = "cliente", description = "the cliente API")
public interface ClienteApi {

	@ApiOperation(value = "Altera um cliente existente", nickname = "alteraCliente", notes = "", response = Cliente.class, tags = {
			"Manutencao", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "Sucesso na alteração", response = Cliente.class),
			@ApiResponse(code = 400, message = "Edit inválido"),
			@ApiResponse(code = 401, message = "Edit não autorizado"),
			@ApiResponse(code = 500, message = "Erro interno do servidor no módulo de alteração de cliente") })
	@RequestMapping(value = "/cliente/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Cliente> alteraCliente(@ApiParam(value = "", required = true) @PathVariable("id") Integer id,
			@ApiParam(value = "", required = true) @Valid @RequestBody Cliente cliente);

	@ApiOperation(value = "Altera o status pelo id do cliente", nickname = "alterarStatusById", notes = "", response = Cliente.class, tags = {
			"Manutencao", })
	@ApiResponses(value = { @ApiResponse(code = 202, message = "Sucesso ao alterar status", response = Cliente.class),
			@ApiResponse(code = 400, message = "Consulta inválida"),
			@ApiResponse(code = 401, message = "Alteração não autorizada"),
			@ApiResponse(code = 404, message = "Nada encontrado, por isso não houve alteração"),
			@ApiResponse(code = 500, message = "Erro interno do servidor no módulo de alteração de status") })
	@RequestMapping(value = "/cliente/{status}/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Cliente> alterarStatusById(
			@ApiParam(value = "", required = true, allowableValues = "\"ativo\", \"inativo\"") @PathVariable("status") String status,
			@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

	@ApiOperation(value = "Apaga um cliente pelo id", nickname = "apagaClientePorId", notes = "", tags = {
			"Exclusao", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Cliente apagado com sucesso"),
			@ApiResponse(code = 400, message = "Consulta inválido"),
			@ApiResponse(code = 401, message = "Consulta não autorizada"),
			@ApiResponse(code = 404, message = "Não encontrou nenhum cliente"),
			@ApiResponse(code = 500, message = "Erro interno do servidor no módulo de consulta de cliente por id") })
	@RequestMapping(value = "/cliente/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> apagaClientePorId(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

	@ApiOperation(value = "Grava um cliente", nickname = "cadastraCliente", notes = "Grava um cliente", response = Cliente.class, tags = {
			"Cadastro", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Cadastrado", response = Cliente.class),
			@ApiResponse(code = 400, message = "Cadastro inválido"),
			@ApiResponse(code = 401, message = "Cadastro não autorizada"),
			@ApiResponse(code = 500, message = "Erro interno do servidor no módulo de cadastro de cliente") })
	@RequestMapping(value = "/cliente", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Cliente> cadastraCliente(@ApiParam(value = "", required = true) @Valid @RequestBody Cliente cliente);

	@ApiOperation(value = "Consulta um cliente pelo id", nickname = "consultaClientePorId", notes = "", response = Cliente.class, tags = {
			"Consulta", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "Sucesso na consulta", response = Cliente.class),
			@ApiResponse(code = 400, message = "Consulta inválido"),
			@ApiResponse(code = 401, message = "Consulta não autorizada"),
			@ApiResponse(code = 404, message = "Não encontrou nenhum cliente"),
			@ApiResponse(code = 500, message = "Erro interno do servidor no módulo de consulta de cliente por id") })
	@RequestMapping(value = "/cliente/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<Cliente> consultaClientePorId(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

	@ApiOperation(value = "Consulta um cliente pelo sobrenome", nickname = "consultaSobrenome", notes = "", response = Clientes.class, tags = {
			"Consulta", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Sucesso na consulta por sobrenome", response = Clientes.class),
			@ApiResponse(code = 400, message = "Consulta inválida"),
			@ApiResponse(code = 401, message = "Consulta não autorizado"),
			@ApiResponse(code = 404, message = "Nada encontrado"),
			@ApiResponse(code = 500, message = "Erro interno do servidor no módulo de consulta por sobrenome") })
	@RequestMapping(value = "/cliente/consulta/{sobrenome}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<Clientes> consultaSobrenome(@ApiParam(value = "", required = true) @PathVariable("sobrenome") String sobrenome);
}
